Documentation for The Splunk-Tanium Search bar functionality

Index:

1) What is the “Splunk-Tanium Search bar functionality”? 
2) What does this new functionality do?
3) What are some use cases?
4) How do I install the update?
5) How do I “run a sensor”?
6) How do I “run a saved question”?
7) How do I interact with the “nlp parser”?
8) How do I ask an “nlp” question?
9) What are the common arguments to all search bar scripts?
10) What are some examples?

1) This software package is the Splunk search bar augment for the Tanium-Splunk app. It is designed to allow Tanium searches directly in the Splunk search bar. This software is currently beta.

2) This software augment will allow a user with access to a Splunk search bar, on a search head, to send Tanium questions and have the results displayed in a table on screen or sent to the Splunk indexer.

This software is a collection of scripts. It makes use of the Splunk search bar "script" functionality. The scripts are written in python. To use the search scripts, in general, issue the command 
"|script python script_name" directly in the search bar.

The scripts use arguments to configure and run on each pass. The arguments will be described below. 

For security reasons these scripts will only be able to ask questions to Tanium. These scripts will not be able to perform actions on hosts. The scripts are also not able to make new sensors or define new saved questions. 

There are currently four main scripts. Each script represents a distinct Tanium search method. The methods represented by the scripts are sensor names, saved searches and the natural language parser. The fourth script is designed to give the user feedback from the natural language parser. All of the scripts are designed to give a similar selection of search options much like being directly on the Tanium console.
3) Enabling Tanium searches via the Splunk search bar allows for consolidation of consoles and gives access to Splunk’s powerful search, correlation and graph capabilities. Example usage would would include a security operations person hunting for an indicator of compromise. A security operations person can ask all Tanium enabled endpoints to show all current TCP connections. This information can be correlated to a list of Splunk indexed and known bad ip addresses. 

Another use would be for an infrastructure operations person getting all hostnames from all computers on the network. The explicit command to execute a natural language search would look like the following. In the search bar enter the command.

|script python tanium_nlp --tanium "some_hostname" --user "username" --password "password" --question "Get Computer Name from all machines"

The results from this query are then displayed in a table for review, and it is also possible to have the results sent to a Splunk indexer for storage and later retrieval.  

4) To install the Tanium search bar augment on a Windows computer, use the prebuilt installer. The requirements are a working install of Splunk, a working copy of the Splunk Tanium app, and access to a Tanium server. The current Tanium app is located here https://apps.splunk.com/app/1862/. The current search bar augment to the Tanium app can be provided by an Tanium TAM.

The prebuilt Windows installer is designed to be simple. All that is required is that the installer is run, and the directory selected by the installer is correct. After the installer completes restart Splunk and the new functionality is ready for use.
 
To install the augment on Linux or Mac copy the files to the Splunk directory. 

Take note of the main Splunk install dir. These instructions assume that the operations are performed on subdirectories of the main Splunk install directory.


a)make the directory /etc/apps/tanium/bin
b)copy the files tanium_nlp_parse.py tanium_run_saved.py tanium_run_sensor.py to the /etc/apps/tanium/bin directory
c)make the directory /etc/apps/tanium/bin/xml
d)copy the files getresult_template.xml getsaved_template.xml submit_nlp_template.xml submit_raw_template.xml submit_template.xml to the /etc/apps/tanium/bin/xml directory
e)make the directory /etc/apps/tanium/local
f)copy the file commands.conf to /etc/apps/tanium/local
g)restart Splunk


Future releases of the Tanium-Splunk app will have this search functionality included,and no extra installer will be needed. Check with any Tanium TAM on the status of the search bar augment integration in to the Tanium app.


5) The tanium_run_sensor script will execute a single or a collection of Tanium sensors. The sensors are run by exact name as shown in the main Tainium console. Multiple sensors can be executed by comma separation. For example --sensors “sensor_a,sensor_b,sensor_c”. The results per sensor are returned in the same order as issued. A listing of all the arguments follow below.

Script Name: tanium_run_sensor

Tanium Splunk Run Sensor

arguments:
  --tanium          TANIUM        Tanium server
  --user            USER          user name
  --password        PASSWORD      user's password
  --sensors         SENSORS       sensor names
  --timeout         TIMEOUT       sensor poll timeout
  --splunk          SPLUNK        Splunk server to TCP to
  --splunk_port     SPLUNK_PORT   Splunk server TCP port


6) The tanium_run_saved script will run a saved question. The saved question must already exist in the Tanium console and a request to run a saved question must match the name exactly. The results will be formatted in the same way that the saved question is constructed.

Script Name: tanium_run_saved

Tanium Splunk Saved Query
arguments:
  --tanium         TANIUM        Tanium server
  --user           USER          user name
  --password       PASSWORD      user password
  --saved          SAVED         saved question
  --timeout        TIMEOUT       sensor poll timeout
  --splunk         SPLUNK        Splunk server to TCP to
  --splunk_port    SPLUNK_PORT   Splunk server TCP port

7) The tanium_nlp_parse script is designed to assist users in the use of the Tanium natural language parser. When a question is passed to the natural language parser, it attempts to make the best interpretation of the user request. Alternative interpretations of the user request are possible. The tanium_nlp_parse script sends a question in natural language to the parser and the parser will return a list of possible interpretations ,that the system understands, of the question asked. This functionality is much like being on the Tanium console. When a NLP question is asked on the console a list interpretations is provided to the user.

Script Name: tanium_nlp_parse

Tanium Splunk NLP Parser

arguments:
  --tanium      TANIUM      Tanium server
  --user        USER        user name
  --password    PASSWORD    user password
  --question    QUESTION    nlp question

8) The tanium_nlp script is designed to run a question using natural language. When a user has a question that he or she would like to as the Tanium system, the user asks the question using natural language. For example “What is the CPU information from all hosts” would be a question that the natural language parser would interpret and execute. The NLP system will do its best to interpret what the user has asked of it. To display what was interpreted and run use the --show_parse option.

Script Name: tanium_nlp

Tanium Splunk NLP Query
arguments:
  --tanium       TANIUM       Tanium server
  --user         USER         user name
  --password     PASSWORD     user password
  --question     QUESTION     nlp question
  --timeout      TIMEOUT      sensor poll timeout
  --show_parse                show parsed question on line 1
  --splunk       SPLUNK       Splunk server to TCP to
  --splunk_port  SPLUNK_PORT  Splunk server TCP port

9) The required arguments that are common to all scripts are the Tanium server, username and password. These without all of these options none of the scripts will run. Note that the Splunk search bar may save previous questions. To improve security reasons be sure to clear search history.
Another argument that is common, but not required for most scripts is the timeout option. Some Tanium questions may take a while to complete. If the question will take a while increase the timeout value to give the system more time to complete the query.

The “splunk” argument is a TCP connector that will forward the results of the query to a Splunk indexer. What will be indexed is a syslog formatted collection of the results, in a similar format to what is displayed on screen.  

The “splunk_port” argument is to be used with the “splunk” argument. The “splunk_port” is the TCP port number that the indexer is listing on. 

If there are any errors when running a query, the code will attempt to display the error in the Splunk search area. Be sure to record all on screen information for debugging. 

10) Some example commands follow. Assume that the Tanium server is running on “localhost” the username is “user” and the password is “user”

a) Execute the Tanium sensor “Computer Name” and display the results on screen.

|script python tanium_run_sensor --tanium "127.0.0.1" --user "user" --password "user" --sensor "Computer Name"  --splunk "127.0.0.1"

b) Execute a several Tanium sensors and display the results on screen.
 
|script python tanium_run_sensor --tanium "127.0.0.1" --user "user" --password "user" --sensors "Computer Name,BIOS Name,CPU,Running Processes,Running Service"

c) Execute a Tanium search using the natural language parser and display the results on screen.

|script python tanium_nlp --tanium "127.0.0.1" --user "user" --password "user" --question "Get Computer Name and Running Processes from all machines"

d) Get a list of possible interpretations of a natural language question from the Tanium natural language parser. A workflow for using this would be to execute the “parse” script first. Select the interpretation that most closely represents what the user would like to do then execute that command by running the “tanium_nlp” script.

|script python tanium_nlp_parse --tanium "127.0.0.1" --user "user" --password "user" --question "Get Computer Name 
